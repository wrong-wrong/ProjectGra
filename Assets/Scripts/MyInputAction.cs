//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/MyInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MyInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MyInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MyInputAction"",
    ""maps"": [
        {
            ""name"": ""DefaultMap"",
            ""id"": ""e6f6641e-3153-46bc-8da1-27b2df43fb6b"",
            ""actions"": [
                {
                    ""name"": ""PlayerMove"",
                    ""type"": ""Value"",
                    ""id"": ""dccb9717-2d91-4814-ac8b-5dbef7d44c22"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PlayerSprint"",
                    ""type"": ""Button"",
                    ""id"": ""ef849940-4089-48da-a703-cb4c1b235ae8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerShoot"",
                    ""type"": ""Button"",
                    ""id"": ""a269c6e2-ded3-4cba-b6a3-d3d221b3f19d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerLook"",
                    ""type"": ""Value"",
                    ""id"": ""6efa40a4-dd1e-4e01-a62a-77e7189cec7d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""ScaleVector2(x=0.05,y=0.05)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c663f862-8cb1-4e70-a90b-6af48176c938"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""f96d7cc0-a7b3-4ba1-abd3-82835368120d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ee1363cd-5e3a-4e34-a09a-ba655b92029c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5d204c86-507e-46c0-bba4-785749765b5a"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8b6e5691-14db-4c78-acd0-26de3005f036"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f7ffb66c-ffb0-4fbd-b6a4-54f443ffe82b"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerSprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d60ddd7d-a5a6-485d-a54a-40dd02c54cfa"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c45b9124-1507-4b4e-9f67-bdc6fd9a92cb"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerLook"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DefaultMap
        m_DefaultMap = asset.FindActionMap("DefaultMap", throwIfNotFound: true);
        m_DefaultMap_PlayerMove = m_DefaultMap.FindAction("PlayerMove", throwIfNotFound: true);
        m_DefaultMap_PlayerSprint = m_DefaultMap.FindAction("PlayerSprint", throwIfNotFound: true);
        m_DefaultMap_PlayerShoot = m_DefaultMap.FindAction("PlayerShoot", throwIfNotFound: true);
        m_DefaultMap_PlayerLook = m_DefaultMap.FindAction("PlayerLook", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DefaultMap
    private readonly InputActionMap m_DefaultMap;
    private List<IDefaultMapActions> m_DefaultMapActionsCallbackInterfaces = new List<IDefaultMapActions>();
    private readonly InputAction m_DefaultMap_PlayerMove;
    private readonly InputAction m_DefaultMap_PlayerSprint;
    private readonly InputAction m_DefaultMap_PlayerShoot;
    private readonly InputAction m_DefaultMap_PlayerLook;
    public struct DefaultMapActions
    {
        private @MyInputAction m_Wrapper;
        public DefaultMapActions(@MyInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlayerMove => m_Wrapper.m_DefaultMap_PlayerMove;
        public InputAction @PlayerSprint => m_Wrapper.m_DefaultMap_PlayerSprint;
        public InputAction @PlayerShoot => m_Wrapper.m_DefaultMap_PlayerShoot;
        public InputAction @PlayerLook => m_Wrapper.m_DefaultMap_PlayerLook;
        public InputActionMap Get() { return m_Wrapper.m_DefaultMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultMapActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultMapActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Add(instance);
            @PlayerMove.started += instance.OnPlayerMove;
            @PlayerMove.performed += instance.OnPlayerMove;
            @PlayerMove.canceled += instance.OnPlayerMove;
            @PlayerSprint.started += instance.OnPlayerSprint;
            @PlayerSprint.performed += instance.OnPlayerSprint;
            @PlayerSprint.canceled += instance.OnPlayerSprint;
            @PlayerShoot.started += instance.OnPlayerShoot;
            @PlayerShoot.performed += instance.OnPlayerShoot;
            @PlayerShoot.canceled += instance.OnPlayerShoot;
            @PlayerLook.started += instance.OnPlayerLook;
            @PlayerLook.performed += instance.OnPlayerLook;
            @PlayerLook.canceled += instance.OnPlayerLook;
        }

        private void UnregisterCallbacks(IDefaultMapActions instance)
        {
            @PlayerMove.started -= instance.OnPlayerMove;
            @PlayerMove.performed -= instance.OnPlayerMove;
            @PlayerMove.canceled -= instance.OnPlayerMove;
            @PlayerSprint.started -= instance.OnPlayerSprint;
            @PlayerSprint.performed -= instance.OnPlayerSprint;
            @PlayerSprint.canceled -= instance.OnPlayerSprint;
            @PlayerShoot.started -= instance.OnPlayerShoot;
            @PlayerShoot.performed -= instance.OnPlayerShoot;
            @PlayerShoot.canceled -= instance.OnPlayerShoot;
            @PlayerLook.started -= instance.OnPlayerLook;
            @PlayerLook.performed -= instance.OnPlayerLook;
            @PlayerLook.canceled -= instance.OnPlayerLook;
        }

        public void RemoveCallbacks(IDefaultMapActions instance)
        {
            if (m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultMapActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultMapActions @DefaultMap => new DefaultMapActions(this);
    public interface IDefaultMapActions
    {
        void OnPlayerMove(InputAction.CallbackContext context);
        void OnPlayerSprint(InputAction.CallbackContext context);
        void OnPlayerShoot(InputAction.CallbackContext context);
        void OnPlayerLook(InputAction.CallbackContext context);
    }
}
